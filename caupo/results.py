"""
Auxiliary module for storage and easy calculation of statistics and metrics
that are provided by data generated by other modules, namely `caupo.cluster_tags`
"""

import argparse
from pathlib import Path

import pandas as pd

VALID_FREQUENCIES = [
    'daily',
    'weekly',
    'monthly',
]


def calculate_average_silhouette(frequency: str, data: pd.DataFrame) -> pd.DataFrame:
    """Given raw result data, finds average silhouette data for a given frequency"""

    assert frequency in VALID_FREQUENCIES, "Unknown frequency value"

    data = data.loc[data["frequency"] == frequency]

    return data[["frequency", "algorithm", "embedder", "sil_score"]].groupby("algorithm").mean().sort_values(
        by=["sil_score"], ascending=False)


def read_csv(file_path: Path) -> pd.DataFrame:
    """Given a path to a file, reads the file and returns a dataframe"""

    return pd.read_csv(file_path)


def main() -> None:
    """Read input arguments and calculates and returns results"""

    parser = argparse.ArgumentParser()
    parser.add_argument("--csv-file", metavar="CSV_FILE", type=str, default="outputs/cluster_tags/results.csv")
    args = parser.parse_args()

    file_path = Path(args.csv_file)
    assert file_path.exists(), "The file does not exist"

    data = read_csv(file_path)

    # Get average of silhouette score
    avg_silhouette_scores = calculate_average_silhouette(data.copy())
    with pd.option_context('display.max_rows', None, 'display.max_columns', None):
        print(avg_silhouette_scores)


if __name__ == "__main__":
    main()
